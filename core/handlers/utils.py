from pathlib import Path

import face_recognition
import numpy as np
from aiogram import types
from aiogram.fsm.context import FSMContext

from core.config import SUPPORTED_IMAGE_TYPES, TEMP_DIR, LOCATION_MODEL_NAME, ENCODING_MODEL_NAME, TOLERANCE
from core.database.methods.client import get_all_clients
from core.database.models import Client
from core.keyboards.inline import cancel_keyboard


async def download_image(msg: types.Message, state: FSMContext, cancel_flag: str) -> tuple[Path | None, types.Message]:
    """ Download the file. Returns Path to downloaded image and message to show status """

    # File is so big
    if msg.document.file_size > 20 * 1024 * 1024:
        message = await msg.reply('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π\! üòñ', reply_markup=cancel_keyboard('–ù–∞–∑–∞–¥'), parse_mode='MarkdownV2')
        return None, message

    # Unsupported file type
    if msg.document.mime_type not in SUPPORTED_IMAGE_TYPES.keys():
        message = await msg.reply('–§–∞–π–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\! üò©', reply_markup=cancel_keyboard('–ù–∞–∑–∞–¥'), parse_mode='MarkdownV2')
        return None, message

    message = await msg.answer('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞\. üìÑ', reply_markup=cancel_keyboard(), parse_mode='MarkdownV2')

    # Download image
    filename = msg.document.file_id + SUPPORTED_IMAGE_TYPES[msg.document.mime_type]
    document_path = TEMP_DIR / filename

    TEMP_DIR.mkdir(exist_ok=True)
    await msg.bot.download(msg.document, document_path)

    # Was cancel
    if not (await state.get_data()).get(cancel_flag):
        return None, message

    # Is the image downloaded?
    if not document_path.exists():
        await message.edit_text('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å\. üò≠\n'
                                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º\.', reply_markup=cancel_keyboard('–ù–∞–∑–∞–¥'), parse_mode='MarkdownV2')
        return None, message

    return document_path, message


async def find_faces(image_path: Path, message: types.Message, state: FSMContext, cancel_flag: str) -> Client | np.ndarray | None:
    """ Validate image and find face on it """

    # Prepare and recognize faces on image
    image = face_recognition.load_image_file(image_path)

    # Check if image can be sent to telegram
    w, h, _ = image.shape
    if max(w, h) / min(w, h) > 20:
        await message.edit_text('–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –∫ —à–∏—Ä–∏–Ω–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20\.',
                                reply_markup=cancel_keyboard(), parse_mode='MarkdownV2')
        return

    face_locations = face_recognition.face_locations(image, model=LOCATION_MODEL_NAME)

    # Was cancel
    if not (await state.get_data()).get(cancel_flag):
        return

    # Faces not found
    if len(face_locations) == 0:
        await message.edit_text('üö´ –ù–∏ –æ–¥–Ω–æ–≥–æ –ª–∏—Ü–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\!', reply_markup=cancel_keyboard('–ù–∞–∑–∞–¥'), parse_mode='MarkdownV2')
        return

    # Found more than one face
    if len(face_locations) > 1:
        await message.edit_text(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(face_locations)} –ª–∏—Ü\. ü§î\n'
                                '–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 1 –ª–∏—Ü–æ\!', reply_markup=cancel_keyboard('–ù–∞–∑–∞–¥'), parse_mode='MarkdownV2')
        return

    await message.edit_text('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ 1 –ª–∏—Ü–æ\. üëå\n'
                            '–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–≥–æ –∂–µ –ª–∏—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\.', reply_markup=cancel_keyboard(), parse_mode='MarkdownV2')

    # Get face encodings
    face_encodings = face_recognition.face_encodings(image, face_locations, model=ENCODING_MODEL_NAME)

    # Get known faces encoding
    clients = await get_all_clients()
    known_faces = [client.face_encoding for client in clients]

    # Compare encodings
    results = face_recognition.compare_faces(known_faces, face_encodings[0], tolerance=TOLERANCE)

    # Was cancel
    if not (await state.get_data()).get(cancel_flag):
        return

    # Extract matches
    indexes = np.nonzero(results)[0]  # axe=0
    if len(indexes) == 0:  # Clients with this face aren't found.
        return face_encodings[0]  # Return face encoding

    # Found more than one matches
    if len(indexes) > 1:
        await message.edit_text(f'–ù–∞–π–¥–µ–Ω–æ {len(indexes)} —Ç–∞–∫–∏—Ö –∂–µ –ª–∏—Ü\. ü§î\n'
                                '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º\.', reply_markup=cancel_keyboard('–ù–∞–∑–∞–¥'), parse_mode='MarkdownV2')
        # TODO send to admins
        return

    return clients[indexes[0]]  # Return matched client


async def clear_temp(state: FSMContext):
    """ Delete file in temp_photo_path and clear state """

    state_data = await state.get_data()
    document_path = state_data.get('temp_photo_path')

    if document_path is not None:
        document_path = Path(document_path)
        if document_path.exists():
            document_path.unlink()

    await state.clear()
