import phonenumbers

from core.database.methods.image import get_client_images
from core.database.methods.service import get_client_services
from core.database.methods.user import check_if_admin
from core.database.methods.visit import get_visit_with_location, get_client_visits_with_location
from core.database.models import Visit, Service, Image
from core.text.utils import escape_markdown_v2


def send_me_image() -> str:
    return ('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–∫ `–¥–æ–∫—É–º–µ–Ω—Ç` \(–¥–æ 10–º–±\)\.\n'
            '–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: `.jpg`, `.heic`')


def cancel_previous_processing() -> str:
    return '–û—Ç–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\. ü§î'


def file_downloaded() -> str:
    return ('‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω\.\n'
            '–ü–æ–∏—Å–∫ –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\. üîé')


def add_name_text() -> str:
    return '–í–≤–µ–¥–∏—Ç–µ `–∏–º—è`:'


def add_social_media_text() -> str:
    return '–í–≤–µ–¥–∏—Ç–µ `—Å–æ—Ü —Å–µ—Ç–∏` –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:'


def add_phone_number_text() -> str:
    return '–í–≤–µ–¥–∏—Ç–µ `–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞` –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:'


def add_service_text() -> str:
    return '–í–≤–µ–¥–∏—Ç–µ `—Å–µ—Ä–≤–∏—Å`:'


def add_image_text() -> str:
    return '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ `—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏` –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç\.'


async def face_info_text(
        client_id: int | str,
        user_id: int | str = None,
        *,
        images: list[Image] = None,
        visits: list[Visit] = None,
        services: list[Service] = None
) -> str:
    """ Returns text info about client """

    is_admin = await check_if_admin(user_id) if user_id is not None else False

    if images is None:
        images = await get_client_images(client_id)

    if visits is None:
        visits = await get_client_visits_with_location(client_id)

    if services is None:
        services = await get_client_services(client_id)

    result = f'*id –≤ –±–∞–∑–µ:* `{client_id}`\n\n'

    if is_admin:
        images_str = '\n'.join(
            f'`{image.url}`'
            for image in images
            if image.url is not None
        ).strip()

        if images_str != '' and images_str != '``':
            result += ('*–°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:*\n'
                       f'{images_str}\n\n')

    # All contacts from visits
    social_media_str = '\n'.join(set(
        f'`{contact}`'
        for visit in visits
        if visit.social_media is not None
        for contact in visit.social_media.split('\n')
    )).strip()

    if social_media_str != '':
        result += ('*–°–æ—Ü —Å–µ—Ç–∏:*\n'
                   f'{social_media_str}\n\n')

    # All phone numbers from visits
    phone_number_str = '\n'.join(set(
        f'`{phonenumbers.format_number(visit.phone_number, phonenumbers.PhoneNumberFormat.E164)}`'
        for visit in visits
        if visit.phone_number is not None
    ))

    if phone_number_str != '':
        result += ('*–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:*\n'
                   f'{phone_number_str}\n\n')

    # Check if each visit has location
    for i in range(len(visits)):
        if visits[i].location is None:
            visits[i] = await get_visit_with_location(visits[i].id)

    # All names with dates and locations
    name_and_date_str = '\n'.join(
        f"{escape_markdown_v2(visit.name) or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} "
        f"\({visit.date:%H:%M %d\.%m\.%Y}\) "
        f"\- {escape_markdown_v2(visit.location.address) or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
        for visit in visits
    ).strip()

    if name_and_date_str != '':
        result += ('*–ò–º—è –∏ –¥–∞—Ç–∞:*\n'
                   f'{name_and_date_str}\n\n')

    # All services
    services_list = [
        f'{escape_markdown_v2(service.title)} \({service.date:%H:%M %d\.%m\.%Y}\)'
        for service in services
    ]

    services_str = '\n'.join(services_list).strip()

    if services_str != '':
        result += ('*–°–µ—Ä–≤–∏—Å—ã:*\n'
                   f'{services_str}\n\n')

    return result
